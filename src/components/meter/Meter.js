import React, { PropTypes } from 'react';

class Meter extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
        elementWidth: props.elementWidth || 64.8344,
        elementHeight: props.elementHeight || 11.7857,
        elementRx: props.elementRx || 6,
        elementRy: props.elementRy || 6
    };

    this.transform = {
      scale: [
        "matrix(0.843223 -0.537192 0.37611 0.590374 49.5137 503.612)",
        "matrix(0.886833 -0.461656 0.323224 0.620908 35.4335 478.505)",
        "matrix(0.923695 -0.382607 0.267878 0.646716 23.5951 452.266)",
        "matrix(0.953526 -0.300646 0.210494 0.667602 14.0886 425.095)",
        "matrix(0.976101 -0.216396 0.151508 0.683407 6.98646 397.199)",
        "matrix(0.991247 -0.1305 0.0913683 0.694011 2.34262 368.79)",
        "matrix(0.998848 -0.0436107 0.0305336 0.699334 0.192441 340.085)",
        "matrix(0.998848 0.0436107 -0.0305336 0.699334 0.552301 311.301)",
        "matrix(0.991247 0.1305 -0.0913683 0.694011 3.41946 282.658)",
        "matrix(0.976101 0.216396 -0.151508 0.683407 8.77209 254.374)",
        "matrix(0.953526 0.300646 -0.210494 0.667602 16.5695 226.664)",
        "matrix(0.923695 0.382607 -0.267878 0.646716 26.7522 199.74)",
        "matrix(0.886833 0.461656 -0.323224 0.620908 39.2429 173.805)",
        "matrix(0.843223 0.537192 -0.37611 0.590374 53.9464 149.057)",
        "matrix(0.793195 0.60864 -0.426133 0.555347 70.7508 125.685)",
        "matrix(0.73713 0.675455 -0.472913 0.516094 89.5283 103.867)",
        "matrix(0.675455 0.73713 -0.516094 0.472913 110.136 83.7685)",
        "matrix(0.60864 0.793195 -0.555347 0.426133 132.417 65.5423)",
        "matrix(0.537192 0.843223 -0.590374 0.37611 156.201 49.3275)",
        "matrix(0.461656 0.886833 -0.620908 0.323224 181.309 35.2472)",
        "matrix(0.382607 0.923695 -0.646716 0.267878 207.548 23.4089)",
        "matrix(0.300646 0.953526 -0.667602 0.210494 234.719 13.9024)",
        "matrix(0.216396 0.976101 -0.683407 0.151508 262.615 6.80025)",
        "matrix(0.1305 0.991247 -0.694011 0.0913683 291.024 2.1564)",
        "matrix(0.0436107 0.998848 -0.699334 0.0305336 319.729 0.00622694)",
        "matrix(-0.0436107 0.998848 -0.699334 -0.0305336 348.513 0.366087)",
        "matrix(-0.1305 0.991247 -0.694011 -0.0913683 377.156 3.23324)",
        "matrix(-0.216396 0.976101 -0.683407 -0.151508 405.44 8.58587)",
        "matrix(-0.300646 0.953526 -0.667602 -0.210494 433.149 16.3832)",
        "matrix(-0.382607 0.923695 -0.646716 -0.267878 460.074 26.566)",
        "matrix(-0.461656 0.886833 -0.620908 -0.323224 486.009 39.0567)",
        "matrix(-0.537192 0.843223 -0.590374 -0.37611 510.757 53.7602)",
        "matrix(-0.60864 0.793195 -0.555347 -0.426133 534.128 70.5646)",
        "matrix(-0.675455 0.73713 -0.516094 -0.472913 555.947 89.3421)",
        "matrix(-0.73713 0.675455 -0.472913 -0.516094 576.045 109.95)",
        "matrix(-0.793195 0.60864 -0.426133 -0.555347 594.271 132.231)",
        "matrix(-0.843223 0.537192 -0.37611 -0.590374 610.486 156.015)",
        "matrix(-0.886833 0.461656 -0.323224 -0.620908 624.567 181.123)",
        "matrix(-0.923695 0.382607 -0.267878 -0.646716 636.405 207.362)",
        "matrix(-0.953526 0.300646 -0.210494 -0.667602 645.911 234.532)",
        "matrix(-0.976101 0.216396 -0.151508 -0.683407 653.014 262.429)",
        "matrix(-0.991247 0.1305 -0.0913683 -0.694011 657.657 290.837)",
          "matrix(-0.998848 0.0436107 -0.0305336 -0.699334 659.808 319.543)",
        "matrix(-0.998848 -0.0436107 0.0305336 -0.699334 659.448 348.327)",
        "matrix(-0.991247 -0.1305 0.0913683 -0.694011 656.581 376.97)",
        "matrix(-0.976101 -0.216396 0.151508 -0.683407 651.228 405.253)",
        "matrix(-0.953526 -0.300646 0.210494 -0.667602 643.431 432.963)",
        "matrix(-0.923695 -0.382607 0.267878 -0.646716 633.248 459.888)",
        "matrix(-0.886833 -0.461656 0.323224 -0.620908 620.757 485.823)",
        "matrix(-0.843223 -0.537192 0.37611 -0.590374 606.054 510.57)"
      ],
      dots: [
        "matrix(0.181609 -0.00792921 0.0305336 0.699334 82.5556 336.489)",
        "matrix(0.180227 -0.0237273 0.0913683 0.694011 84.079 358.029)",
        "matrix(0.177473 -0.0393448 0.151508 0.683407 87.4739 379.355)",
        "matrix(0.173368 -0.0546629 0.210494 0.667602 92.7146 400.304)",
        "matrix(0.167945 -0.0695649 0.267878 0.646716 99.7612 420.717)",
        "matrix(0.161242 -0.0839375 0.323224 0.620908 108.56 440.438)",
        "matrix(0.153313 -0.0976713 0.37611 0.590374 119.044 459.316)",
        "matrix(-0.153313 -0.0976713 0.37611 -0.590374 536.523 466.274)",
        "matrix(-0.161242 -0.0839375 0.323224 -0.620908 547.63 447.755)",
        "matrix(-0.167945 -0.0695649 0.267878 -0.646716 557.082 428.339)",
        "matrix(-0.173368 -0.0546629 0.210494 -0.667602 564.805 408.173)",
        "matrix(-0.177473 -0.0393448 0.151508 -0.683407 570.74 387.41)",
        "matrix(-0.180227 -0.0237273 0.0913683 -0.694011 574.844 366.209)",
        "matrix(-0.181609 -0.00792921 0.0305336 -0.699334 577.085 344.731)",
        "matrix(-0.181609 0.00792921 -0.0305336 -0.699334 577.444 323.139)",
        "matrix(-0.180227 0.0237273 -0.0913683 -0.694011 575.921 301.598)",
        "matrix(-0.177473 0.0393448 -0.151508 -0.683407 572.526 280.272)",
        "matrix(-0.173368 0.0546629 -0.210494 -0.667602 567.285 259.323)",
        "matrix(-0.167945 0.0695649 -0.267878 -0.646716 560.239 238.911)",
        "matrix(-0.161242 0.0839375 -0.323224 -0.620908 551.44 219.19)",
        "matrix(-0.153313 0.0976713 -0.37611 -0.590374 540.956 200.311)",
        "matrix(-0.144217 0.110662 -0.426133 -0.555347 528.866 182.418)",
        "matrix(-0.134024 0.12281 -0.472913 -0.516094 515.263 165.646)",
        "matrix(-0.12281 0.134024 -0.516094 -0.472913 500.25 150.124)",
        "matrix(-0.110662 0.144217 -0.555347 -0.426133 483.941 135.97)",
        "matrix(-0.0976713 0.153313 -0.590374 -0.37611 466.461 123.291)",
        "matrix(-0.0839375 0.161242 -0.620908 -0.323224 447.942 112.183)",
        "matrix(-0.0695649 0.167945 -0.646716 -0.267878 428.525 102.732)",
        "matrix(-0.0546629 0.173368 -0.667602 -0.210494 408.359 95.0093)",
        "matrix(-0.0393448 0.177473 -0.683407 -0.151508 387.596 89.0733)",
        "matrix(-0.0237273 0.180227 -0.694011 -0.0913683 366.395 84.9696)",
        "matrix(-0.00792921 0.181609 -0.699334 -0.0305336 344.917 82.7293)",
        "matrix(0.00792921 0.181609 -0.699334 0.0305336 323.325 82.3694)",
        "matrix(0.0237273 0.180227 -0.694011 0.0913683 301.784 83.8928)",
        "matrix(0.0393448 0.177473 -0.683407 0.151508 280.458 87.2877)",
        "matrix(0.0546629 0.173368 -0.667602 0.210494 259.509 92.5284)",
        "matrix(0.0695649 0.167945 -0.646716 0.267878 239.097 99.575)",
        "matrix(0.0839375 0.161242 -0.620908 0.323224 219.376 108.374)",
        "matrix(0.0976713 0.153313 -0.590374 0.37611 200.497 118.858)",
        "matrix(0.110662 0.144217 -0.555347 0.426133 182.604 130.948)",
        "matrix(0.12281 0.134024 -0.516094 0.472913 165.833 144.551)",
        "matrix(0.134024 0.12281 -0.472913 0.516094 150.311 159.564)",
        "matrix(0.144217 0.110662 -0.426133 0.555347 136.156 175.873)",
        "matrix(0.153313 0.0976713 -0.37611 0.590374 123.477 193.353)",
        "matrix(0.161242 0.0839375 -0.323224 0.620908 112.37 211.872)",
        "matrix(0.167945 0.0695649 -0.267878 0.646716 102.918 231.289)",
        "matrix(0.173368 0.0546629 -0.210494 0.667602 95.1955 251.455)",
        "matrix(0.177473 0.0393448 -0.151508 0.683407 89.2596 272.218)",
        "matrix(0.180227 0.0237273 -0.0913683 0.694011 85.1558 293.419)",
        "matrix(0.181609 0.00792921 -0.0305336 0.699334 82.9155 314.897)"
      ]
    };

    this.thresholdNum = this.thresholdNum.bind(this);
    this.drawRect = this.drawRect.bind(this);
  }

  thresholdNum() {
    return Math.round(this.transform.scale.length * this.props.value / (this.props.maxValue - this.props.minValue)) - 1;
  }

  drawRect(value, index, className = '') {
      return (<rect className={'fill-' + index + ' ' + className}
                   key={index}
                   transform={value}
                   width={this.state.elementWidth}
                   height={this.state.elementHeight}
                   rx={this.state.elementRx}
                   ry={this.state.elementRy} />);
  }

  render() {
    let meanStyle = {
        paddingTop: Math.round(0.18 * this.props.width),
        fontSize: Math.round(0.054 * this.props.width)
    };

    let valueStyle = {
        paddingTop: Math.round(0.1 * this.props.width),
        fontSize: Math.round(0.18 * this.props.width)
    };

    return (
      <div className={'meter-container ' + this.props.containerClass}>
        <div className="meter-body">
          <div className="meter-scale">
            <svg xmlns="http://www.w3.org/2000/svg" version="1.0" viewBox="0 0 660 660">
              <g className="scale">
                {this.transform.scale.map(
                  (value, index) => {
                    let className = (this.thresholdNum() >= index) ? 'active' : '';
                    return this.drawRect(value, index , className);
                  }
                )}
              </g>
              <g className="dots">
                {this.transform.dots.map((value, index) => this.drawRect(value, index))}
              </g>
            </svg>
          </div>
          <div className="meter-mean-value" style={meanStyle}>
            {this.props.meanValue}
          </div>
          <div className="meter-display" style={valueStyle}>
            {this.props.value}
          </div>
        </div>
        <div className="meter-footer">
          <div className="meter-footer-logo"></div>
          <div className="meter-footer-content">
            {this.props.footerContent}
          </div>
        </div>
      </div>
    );
  }
}

Meter.propTypes = {
  width: PropTypes.number,
  containerClass: PropTypes.string,
  footerContent: PropTypes.string,
  value: PropTypes.number.isRequired,
  maxValue: PropTypes.number.isRequired,
  minValue: PropTypes.number.isRequired,
  meanValue: PropTypes.number.isRequired
};

export default  Meter;
